<!doctype html>
<html>
<head>
  <title>Millwright.js</title>

  {[{#assets.styles}]}
    <link href="{[{.}]}" rel="stylesheet">
  {[{/assets.styles}]}
</head>

<body>
  <section class="project-status">
    <div class="container container-wide">
      <p>
        <strong>Millwright.js is currently in alpha.</strong>
        It is expected to work as described, but needs quite a lot of testing. Please use Millwright
        carefully during this phase. Pull requests and issues on GitHub are most welcome!!
      </p>
    </div>
  </section>
  <header class="container">
    <h1 class="header-title">Millwright.js</h1>
    <p class="header-subtitle">A zero configuration build tool for the web.</p>
    <a class="header-link" href="https://github.com/millwrightjs/millwright">GitHub</a>
    <a class="header-link" href="https://www.npmjs.com/package/millwright">npm</a>
  </header>
  <section class="container">
    <div class="code-block header-code-block">
      <p>cd &lt;your-project-name&gt;</p>
      <p>npm install millwright-cli -g</p>
      <p>npm install millwright --save-dev</p>
    </div>
  </section>
  <section class="container project-description">
    <h1>Stop configuring your build tool and start writing code.</h1>
    <p>
      Millwright's big idea is simple: building code (transforming authored code into production
      ready code) shouldn't be something that we have to think about.
    </p>
    <p>
      <strong>We're starting with static site generation.</strong> It transpiles pre-processor and
      future syntax code. It does sourcemaps. It serves your project locally with file watching and
      auto-inject/reload. It produces optimized builds. All without writing any configuration code.
    </p>
    <p>Keep scrolling to get started!</p>
  </section>
  <section class="container docs">
    <h2>Getting started</h2>
    <p>
      This guide assumes that you know how to install and save npm packages to your project. If
      that's not you, we recommend checking out
      <a href="https://docs.npmjs.com/getting-started/what-is-npm">their docs</a>
      to get going.
    </p>
    <h3>Installation</h3>
    <p>
      Millwright requires two packages - a global package, which allows you to use the
      <code>mill</code> command, and a local package, which is installed per-project.
    </p>
    <p>
      To install the global package, run <code>npm install millwright-cli -g</code>.
      Then, from inside your project directory, install the local package by running
      <code>npm install millwright --save-dev</code>.
    </p>
    <h3>Commands</h3>
    <p>
      Millwright currently utilizes a handful of commands centered around static site generation:
    </p>
    <p>
      <code>mill make</code> - generates a development build with no optimization
    </p>
    <p>
      <code>mill build</code> - generates an optimized build for production use
    </p>
    <p>
      <code>mill dev</code> - same as <code>mill make</code>, but serves
      locally and watches for changes.
    </p>
    <p>
      <code>mill preview</code> - same as <code>mill build</code>, but
      serves locally. Does not watch for changes.
    </p>
    <h2>Usage</h2>
    <p>
      Because of Millwright's zero configuration approach, usage documentation is less concerned
      with how to setup and run the tool, and is instead focused on how your project can take
      advantage of what Millwright does automatically.
    </p>
    <h3>Project structure</h3>
    <p>
      To use Millwright, your project will need to follow a few structural guidelines. The goal here
      was to require a basic structure inspired by standard practice in the community, nothing
      Millwright-specific that would tie your project to a tool.
    </p>
    <p>
      A project that uses Millwright doesn't <em>need</em> to have anything except a
      <code>src</code> directory.  With just that, Millwright would copy everything to a
      <code>dest</code> directory, compiling any mustache templates along the way. But we probably
      want to do more than that. We'll use some commented example code to walk through how this
      structure looks and works.
    </p>
    <p>
      Let's look at a very basic example structure:
    </p>
    <div class="code-block">
<pre>
package.json
node_modules
src
 ├─ index.json
 └─ index.mustache
</pre>
    </div>
    <h4>index.json</h4>
    <div class="code-block">
<pre>
{
  "pageTitle": "Home",
  "assets": {
    "styles": ["styles.sass"]
  }
}
</pre>
    </div>
    <h4>index.mustache</h4>
    <div class="code-block">
<pre>
{[{#lambdas.escape}]}
<head>
  <title>Example Website{[{# pageTitle}]}| {[{.}]}{[{/ pageTitle}]}</title>

  {[{# assets.styles}]}
    <link href="{[{.}]}" rel="stylesheet">
  {[{/ assets.styles}]}
</head>
{[{/lambdas.escape}]}
</pre>

    </div>
  </section>
  <footer class="container">
    <p>&copy; 2016-2017 Shawn Erquhart. Released under the MIT license.</p>
  </footer>
</body>
